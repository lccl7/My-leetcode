//This time may have duplicate elements so we should sort first so that the same element can get together
//Another is that jump element that are equal( line 18).
void dfs(vector<int> &num, vector<vector<int> > &res, vector<int> tmp, vector<bool> &visit)
{
    if(tmp.size() == num.size())
    {
        res.push_back(tmp); return;
    }
    for(int i = 0; i < num.size(); ++i)
    {
        if(visit[i] == false)
        {
            tmp.push_back(num[i]);
            visit[i] = true;
            dfs(num, res, tmp, visit);
            tmp.pop_back();
            visit[i] = false;
            while(i < num.size()-1 && num[i] == num[i+1]) i++;
        }
    }
}

class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &num) {
        vector<vector<int> > res;
        vector<int> tmp;
        vector<bool> visit(num.size(), false);
        sort(num.begin(), num.end());
        dfs(num, res, tmp, visit);
        return res;
    }
};
